-- MySQL Script generated by MySQL Workbench
-- Tue 01 Dec 2015 11:47:32 AM EST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema fc_test
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema fc_test
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `fc_test` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `fc_test` ;

-- -----------------------------------------------------
-- Table `fc_test`.`Party`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Party` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Core entity representing any person or group we interact with.';


-- -----------------------------------------------------
-- Table `fc_test`.`Person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Person` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Person_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Person_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Person entity, of the type Party. Indicates that this party is a single person.';


-- -----------------------------------------------------
-- Table `fc_test`.`Person_Name`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Person_Name` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Person_id` INT NOT NULL COMMENT '',
  `name` TEXT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Name_Person_idx` (`Person_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Name_Person`
    FOREIGN KEY (`Person_id`)
    REFERENCES `fc_test`.`Person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'A list of people\'s names, and the dates those names are relevant. This table allows records for Person entities that change names during their business with us.';


-- -----------------------------------------------------
-- Table `fc_test`.`Gender_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Gender_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `name` TEXT NOT NULL COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of genders currently accepted by the system. This table exists so that genders are expandable as needed.';


-- -----------------------------------------------------
-- Table `fc_test`.`Gender_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Gender_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Person_id` INT NOT NULL COMMENT '',
  `Gender_Type_id` INT NOT NULL COMMENT '',
  `from_date` TEXT NOT NULL COMMENT '',
  `thru_date` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Gender_Person1_idx` (`Person_id` ASC)  COMMENT '',
  INDEX `fk_Gender_Gender_Type1_idx` (`Gender_Type_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Gender_Person1`
    FOREIGN KEY (`Person_id`)
    REFERENCES `fc_test`.`Person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Gender_Gender_Type1`
    FOREIGN KEY (`Gender_Type_id`)
    REFERENCES `fc_test`.`Gender_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates a Person with a Gender_Type, for some period of time. Allows members\' genders to change over time.';


-- -----------------------------------------------------
-- Table `fc_test`.`Organization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Organization` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Organization_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Organization_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Organization entity, of the type Party. Indicates that this party is an organization of some structure.';


-- -----------------------------------------------------
-- Table `fc_test`.`Organization_Name`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Organization_Name` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Organization_id` INT NOT NULL COMMENT '',
  `name` TEXT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Organization_Name_Organization1_idx` (`Organization_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Organization_Name_Organization1`
    FOREIGN KEY (`Organization_id`)
    REFERENCES `fc_test`.`Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'A list of organization names, and the dates those names are relevant. This table allows records for companies that change names during their business with us.';


-- -----------------------------------------------------
-- Table `fc_test`.`Legal_Organization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Legal_Organization` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Organization_id` INT NOT NULL COMMENT '',
  `federal_tax_id` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Legal_Organization_Organization1_idx` (`Organization_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Legal_Organization_Organization1`
    FOREIGN KEY (`Organization_id`)
    REFERENCES `fc_test`.`Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subtype of organizations, used for organizations that possess legal rights as an entity, and likely have a tax id.';


-- -----------------------------------------------------
-- Table `fc_test`.`Informal_Organization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Informal_Organization` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Organization_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Informal_Organization_Organization1_idx` (`Organization_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Informal_Organization_Organization1`
    FOREIGN KEY (`Organization_id`)
    REFERENCES `fc_test`.`Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subtype of organizations, used for informal organizations like clubs, and likely do not have a tax id.';


-- -----------------------------------------------------
-- Table `fc_test`.`Organization_Person_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Organization_Person_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Person_id` INT NOT NULL COMMENT '',
  `Organization_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Org_Person_Link_Person1_idx` (`Person_id` ASC)  COMMENT '',
  INDEX `fk_Org_Person_Link_Organization1_idx` (`Organization_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Org_Person_Link_Person1`
    FOREIGN KEY (`Person_id`)
    REFERENCES `fc_test`.`Person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Org_Person_Link_Organization1`
    FOREIGN KEY (`Organization_id`)
    REFERENCES `fc_test`.`Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Association of people in organizations. Used to indicate that a given person is in a given organization.';


-- -----------------------------------------------------
-- Table `fc_test`.`Party_Description`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Party_Description` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of party descriptions. These description will be linked to a party by a row in Party_Description_Association. \nParties may have an arbitrary number of descriptions, and vice versa.';


-- -----------------------------------------------------
-- Table `fc_test`.`Party_Description_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Party_Description_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_Description_id` INT NOT NULL COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Party_Description_Association_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Party_Description_Association_Party_Description1`
    FOREIGN KEY (`Party_Description_id`)
    REFERENCES `fc_test`.`Party_Description` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Party_Description_Association_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates Party entities with Party_Description entities.';


-- -----------------------------------------------------
-- Table `fc_test`.`Party_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Party_Role` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Party_Role_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Party_Role_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Used to classify parties into the roles they play relative to the company. Has several subclasses, and supports multiple concurrent and sequential roles per party.';


-- -----------------------------------------------------
-- Table `fc_test`.`Person_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Person_Role` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Person_Role_Party_Role1_idx` (`Party_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Person_Role_Party_Role1`
    FOREIGN KEY (`Party_Role_id`)
    REFERENCES `fc_test`.`Party_Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Party_Role that supports all Person entity relevant roles.';


-- -----------------------------------------------------
-- Table `fc_test`.`Role_of_Organization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Role_of_Organization` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Organization_Role_Party_Role1_idx` (`Party_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Organization_Role_Party_Role1`
    FOREIGN KEY (`Party_Role_id`)
    REFERENCES `fc_test`.`Party_Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Party_Role that supports all Person entity relevant roles.';


-- -----------------------------------------------------
-- Table `fc_test`.`Employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Employee` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Person_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Employee_Person_Role1_idx` (`Person_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Employee_Person_Role1`
    FOREIGN KEY (`Person_Role_id`)
    REFERENCES `fc_test`.`Person_Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Person_Role that represents Employees of the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Contractor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Contractor` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Person_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Contractor_Person_Role1_idx` (`Person_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Contractor_Person_Role1`
    FOREIGN KEY (`Person_Role_id`)
    REFERENCES `fc_test`.`Person_Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Person_Role that represents Contractors for the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Contact`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Contact` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Person_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Contact_Person_Role1_idx` (`Person_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Contact_Person_Role1`
    FOREIGN KEY (`Person_Role_id`)
    REFERENCES `fc_test`.`Person_Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Person_Role that represents Contacts of the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Distributor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Distributor` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Organization_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Distributor_Organization_Role1_idx` (`Organization_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Distributor_Organization_Role1`
    FOREIGN KEY (`Organization_Role_id`)
    REFERENCES `fc_test`.`Role_of_Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Organization_Role that represents Distributors for the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Internal_Department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Internal_Department` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Organization_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Internal_Department_Organization_Role1_idx` (`Organization_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Internal_Department_Organization_Role1`
    FOREIGN KEY (`Organization_Role_id`)
    REFERENCES `fc_test`.`Role_of_Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Organization_Role that represents Departments within the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Customer` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Customer_Party_Role1_idx` (`Party_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Customer_Party_Role1`
    FOREIGN KEY (`Party_Role_id`)
    REFERENCES `fc_test`.`Party_Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Party_Role, and applicable irrelevant of the subclass of the given Party entity. This table contains all parties that are active customers.';


-- -----------------------------------------------------
-- Table `fc_test`.`Competition`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Competition` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Organization_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Competition_Organization_Role1_idx` (`Organization_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Competition_Organization_Role1`
    FOREIGN KEY (`Organization_Role_id`)
    REFERENCES `fc_test`.`Role_of_Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Organization_Role that represents Competitors to the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Lead`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Lead` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_Role_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Lead_Party_Role1_idx` (`Party_Role_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Lead_Party_Role1`
    FOREIGN KEY (`Party_Role_id`)
    REFERENCES `fc_test`.`Party_Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Party_Role, and applicable irrelevant of the subclass of the given Party entity. This table contains all potential parties that are worth tracking as potential customers or suppliers.';


-- -----------------------------------------------------
-- Table `fc_test`.`Party_Relationship`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Party_Relationship` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id_1` INT NOT NULL COMMENT '',
  `Party_id_2` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Party_Relationship_Party1_idx` (`Party_id_1` ASC)  COMMENT '',
  INDEX `fk_Party_Relationship_Party2_idx` (`Party_id_2` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Party_Relationship_Party1`
    FOREIGN KEY (`Party_id_1`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Party_Relationship_Party2`
    FOREIGN KEY (`Party_id_2`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'A relationship between two parties, as well as the dates that relationship is active, and a description of the relationship.';


-- -----------------------------------------------------
-- Table `fc_test`.`Relationship_Note`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Relationship_Note` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_Relationship_id` INT NOT NULL COMMENT '',
  `timestamp` TIMESTAMP NOT NULL COMMENT '',
  `note` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Relationship_Note_Party_Relationship1_idx` (`Party_Relationship_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Relationship_Note_Party_Relationship1`
    FOREIGN KEY (`Party_Relationship_id`)
    REFERENCES `fc_test`.`Party_Relationship` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Timestamped notes relating to a given Party_Relationship. These would be for logging information relevant to the relationship.';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Event_Status_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Event_Status_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of potential statuses for communication events.';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Mechanism_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Mechanism_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of types of Communication_Mechanism, to be referenced by Communication_Event entities. The actual mechanisms used are irrelevant, the associated Party_Relationship and Communication_Mechanism_Type provide all the important information about the communication event.';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Event` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_Relationship_id` INT NULL COMMENT '',
  `Communication_Event_Status_Type_id` INT NOT NULL COMMENT '',
  `Communication_Mechanism_Type_id` INT NOT NULL COMMENT '',
  `datetime_start` TIMESTAMP NOT NULL COMMENT '',
  `datetime_end` TIMESTAMP NULL COMMENT '',
  `note` VARCHAR(45) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Communication_Event_Party_Relationship1_idx` (`Party_Relationship_id` ASC)  COMMENT '',
  INDEX `fk_Communication_Event_Communication_Event_Status_Type1_idx` (`Communication_Event_Status_Type_id` ASC)  COMMENT '',
  INDEX `fk_Communication_Event_Communication_Mechanism_Type1_idx` (`Communication_Mechanism_Type_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Communication_Event_Party_Relationship1`
    FOREIGN KEY (`Party_Relationship_id`)
    REFERENCES `fc_test`.`Party_Relationship` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Communication_Event_Communication_Event_Status_Type1`
    FOREIGN KEY (`Communication_Event_Status_Type_id`)
    REFERENCES `fc_test`.`Communication_Event_Status_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Communication_Event_Communication_Mechanism_Type1`
    FOREIGN KEY (`Communication_Mechanism_Type_id`)
    REFERENCES `fc_test`.`Communication_Mechanism_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'List of all communications between parties, including date and time, a note, and connections to reference information about the communication event. Party_Relationship_id is an optional value, used only in 2-party communications. In >= 3-party communications, each party involved in the event should instead be given a Communication_Event_Role entry.';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Mechanism`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Mechanism` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'A Communication_Mechanism is an object that allows connections and transfer of information to another Communication_Mechanism. Subtypes include email addresses, phone numbers, and physical addresses'
PACK_KEYS = 1;


-- -----------------------------------------------------
-- Table `fc_test`.`Email_Address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Email_Address` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Communication_Mechanism_id` INT NOT NULL COMMENT '',
  `email` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Email_Address_Communication_Mechanism1_idx` (`Communication_Mechanism_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Email_Address_Communication_Mechanism1`
    FOREIGN KEY (`Communication_Mechanism_id`)
    REFERENCES `fc_test`.`Communication_Mechanism` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subtype of Communication_Mechanism, this is an email address.';


-- -----------------------------------------------------
-- Table `fc_test`.`Phone_Number`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Phone_Number` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Communication_Mechanism_id` INT NOT NULL COMMENT '',
  `phone_name` TEXT NOT NULL COMMENT '',
  `phone_number` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Phone_Number_Communication_Mechanism1_idx` (`Communication_Mechanism_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Phone_Number_Communication_Mechanism1`
    FOREIGN KEY (`Communication_Mechanism_id`)
    REFERENCES `fc_test`.`Communication_Mechanism` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subtype of Communication_Mechanism, this is a phone number with an optional label.';


-- -----------------------------------------------------
-- Table `fc_test`.`Address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Address` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Communication_Mechanism_id` INT NOT NULL COMMENT '',
  `street_address` TEXT NOT NULL COMMENT '',
  `street_address_2` TEXT NULL COMMENT '',
  `city` TEXT NOT NULL COMMENT '',
  `state` TEXT NOT NULL COMMENT '',
  `zip` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Address_Communication_Mechanism1_idx` (`Communication_Mechanism_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Address_Communication_Mechanism1`
    FOREIGN KEY (`Communication_Mechanism_id`)
    REFERENCES `fc_test`.`Communication_Mechanism` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subtype of Communication_Mechanism, this is a physical address in the USA. This could later be adapted to support international addresses as well, but currently does not.';


-- -----------------------------------------------------
-- Table `fc_test`.`Party_Communication_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Party_Communication_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Communication_Mechanism_id` INT NOT NULL COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `note` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Communication_Mechanism_Association_Communication_Mechan_idx` (`Communication_Mechanism_id` ASC)  COMMENT '',
  INDEX `fk_Communication_Mechanism_Association_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Communication_Mechanism_Association_Communication_Mechanism1`
    FOREIGN KEY (`Communication_Mechanism_id`)
    REFERENCES `fc_test`.`Communication_Mechanism` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Communication_Mechanism_Association_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates a Communication_Mechanism with a Party, for the purposes of having contact info tied to parties in our system.';


-- -----------------------------------------------------
-- Table `fc_test`.`Facility`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Facility` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `name` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Facility entities represent locations in the world. These facilities can be buildings, departments, or rooms, and may recursively contain other facilities.';


-- -----------------------------------------------------
-- Table `fc_test`.`Facility_Organization_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Facility_Organization_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Facility_id` INT NOT NULL COMMENT '',
  `Organization_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Facility_Organization_Association_Facility1_idx` (`Facility_id` ASC)  COMMENT '',
  INDEX `fk_Facility_Organization_Association_Organization1_idx` (`Organization_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Facility_Organization_Association_Facility1`
    FOREIGN KEY (`Facility_id`)
    REFERENCES `fc_test`.`Facility` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Facility_Organization_Association_Organization1`
    FOREIGN KEY (`Organization_id`)
    REFERENCES `fc_test`.`Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Association of organizations and facilities. Used to indicate that a given organization uses a given facility.';


-- -----------------------------------------------------
-- Table `fc_test`.`Facility_Communication_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Facility_Communication_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Facility_id` INT NOT NULL COMMENT '',
  `Communication_Mechanism_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Facility_Communication_Association_Facility1_idx` (`Facility_id` ASC)  COMMENT '',
  INDEX `fk_Facility_Communication_Association_Communication_Mechani_idx` (`Communication_Mechanism_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Facility_Communication_Association_Facility1`
    FOREIGN KEY (`Facility_id`)
    REFERENCES `fc_test`.`Facility` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Facility_Communication_Association_Communication_Mechanism1`
    FOREIGN KEY (`Communication_Mechanism_id`)
    REFERENCES `fc_test`.`Communication_Mechanism` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This table associates Communication_Mechanisms with Facilities.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `name` TEXT NOT NULL COMMENT '',
  `introduction_date` DATE NULL COMMENT '',
  `discontinuation_date` DATE NULL COMMENT '',
  `eol_date` DATE NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Core entity representing any Product we purchase, sell, and/or use.';


-- -----------------------------------------------------
-- Table `fc_test`.`Good`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Good` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Good_Product1_idx` (`Product_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Good_Product1`
    FOREIGN KEY (`Product_id`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Product representing the delivery of physical goods.';


-- -----------------------------------------------------
-- Table `fc_test`.`Service`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Service` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Service_Product1_idx` (`Product_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Service_Product1`
    FOREIGN KEY (`Product_id`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Product representing the delivery of services and/or expertise.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Category` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of Product_Category entities that may be associated with Product entities.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Category_Classification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Category_Classification` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_id` INT NOT NULL COMMENT '',
  `Product_Category_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `primary_flag` TINYINT(1) NOT NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Product_Category_Classification_Product1_idx` (`Product_id` ASC)  COMMENT '',
  INDEX `fk_Product_Category_Classification_Product_Category1_idx` (`Product_Category_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Product_Category_Classification_Product1`
    FOREIGN KEY (`Product_id`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Category_Classification_Product_Category1`
    FOREIGN KEY (`Product_Category_id`)
    REFERENCES `fc_test`.`Product_Category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Association of Products and Product_Categories, applying categorical labels to products. Has date ranges to designate the time the product should be considered a part of the category, as well as a flag indicating whether it should be considered the primary category of that Product.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Category_Rollup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Category_Rollup` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_Category_id_parent` INT NOT NULL COMMENT '',
  `Product_Category_id_child` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Product_Category_Rollup_Product_Category1_idx` (`Product_Category_id_parent` ASC)  COMMENT '',
  INDEX `fk_Product_Category_Rollup_Product_Category2_idx` (`Product_Category_id_child` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Product_Category_Rollup_Product_Category1`
    FOREIGN KEY (`Product_Category_id_parent`)
    REFERENCES `fc_test`.`Product_Category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Category_Rollup_Product_Category2`
    FOREIGN KEY (`Product_Category_id_child`)
    REFERENCES `fc_test`.`Product_Category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When a category can be considered a subcategory of another, we can represent this with a Rollup designating the Parent-Child relationship of arbitrary categories.';


-- -----------------------------------------------------
-- Table `fc_test`.`Role_in_Organization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Role_in_Organization` (
  `id` INT NOT NULL COMMENT '',
  `name` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of roles that exist within organizations. ';


-- -----------------------------------------------------
-- Table `fc_test`.`Organization_Role_Classification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Organization_Role_Classification` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Organization_Person_Association_id` INT NOT NULL COMMENT '',
  `Organization_Role_id` INT NOT NULL COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Organization_Role_Classification_Organization_Role1_idx` (`Organization_Role_id` ASC)  COMMENT '',
  INDEX `fk_Organization_Role_Classification_Organization_Person_Ass_idx` (`Organization_Person_Association_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Organization_Role_Classification_Organization_Role1`
    FOREIGN KEY (`Organization_Role_id`)
    REFERENCES `fc_test`.`Role_in_Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Organization_Role_Classification_Organization_Person_Assoc1`
    FOREIGN KEY (`Organization_Person_Association_id`)
    REFERENCES `fc_test`.`Organization_Person_Association` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Classifies the type of association between a person and an organization, using roles defined in Organization_Role. Indicates what role the person plays in the organization. A single association can have multiple roles.';


-- -----------------------------------------------------
-- Table `fc_test`.`Good_Identification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Good_Identification` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Good_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Good_Identification_Good1_idx` (`Good_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Good_Identification_Good1`
    FOREIGN KEY (`Good_id`)
    REFERENCES `fc_test`.`Good` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Goods need to be identified, and this table links an arbitrary number of various identification codes to a single good.';


-- -----------------------------------------------------
-- Table `fc_test`.`Manufacturer_ID_Number`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Manufacturer_ID_Number` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Good_Identification_id` INT NOT NULL COMMENT '',
  `manufacturer_id_number` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Manufacturer_ID_Number_Good_Identification1_idx` (`Good_Identification_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Manufacturer_ID_Number_Good_Identification1`
    FOREIGN KEY (`Good_Identification_id`)
    REFERENCES `fc_test`.`Good_Identification` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'List of Manufacturer IDs that should return the linked Good.';


-- -----------------------------------------------------
-- Table `fc_test`.`SKU`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`SKU` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Good_Identification_id` INT NOT NULL COMMENT '',
  `sku_id` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_SKU_Good_Identification1_idx` (`Good_Identification_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_SKU_Good_Identification1`
    FOREIGN KEY (`Good_Identification_id`)
    REFERENCES `fc_test`.`Good_Identification` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'List of SKUs that should return the linked Good.';


-- -----------------------------------------------------
-- Table `fc_test`.`MD_PIN`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`MD_PIN` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Good_Identification_id` INT NOT NULL COMMENT '',
  `md_pin_manufacturer` TEXT NOT NULL COMMENT '',
  `md_pin_handset` TEXT NOT NULL COMMENT '',
  `md_pin_subsystem` TEXT NOT NULL COMMENT '',
  `md_pin_origin` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_MD-PIN_Good_Identification1_idx` (`Good_Identification_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_MD-PIN_Good_Identification1`
    FOREIGN KEY (`Good_Identification_id`)
    REFERENCES `fc_test`.`Good_Identification` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Mobile device parts are a singularly tricky beast, so MRRU developed the MD-PIN identification system. Support for this identification system is built into this table.';


-- -----------------------------------------------------
-- Table `fc_test`.`MD_PIN_Child_Reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`MD_PIN_Child_Reference` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `MD_PIN_id_this` INT NOT NULL COMMENT '',
  `md_pin_child_code` TEXT NOT NULL COMMENT '',
  `MD_PIN_id_child` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_MD_PIN_Child_Reference_MD_PIN1_idx` (`MD_PIN_id_this` ASC)  COMMENT '',
  INDEX `fk_MD_PIN_Child_Reference_MD_PIN2_idx` (`MD_PIN_id_child` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_MD_PIN_Child_Reference_MD_PIN1`
    FOREIGN KEY (`MD_PIN_id_this`)
    REFERENCES `fc_test`.`MD_PIN` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MD_PIN_Child_Reference_MD_PIN2`
    FOREIGN KEY (`MD_PIN_id_child`)
    REFERENCES `fc_test`.`MD_PIN` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When MD-PINs reference children, this association links to the proper child.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Feature` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Core entity representing any Product_Feature relevant to a Product.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Feature_Applicability`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Feature_Applicability` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_id` INT NOT NULL COMMENT '',
  `Product_Feature_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Product_Feature_Applicability_Product1_idx` (`Product_id` ASC)  COMMENT '',
  INDEX `fk_Product_Feature_Applicability_Product_Feature1_idx` (`Product_Feature_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Product_Feature_Applicability_Product1`
    FOREIGN KEY (`Product_id`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Feature_Applicability_Product_Feature1`
    FOREIGN KEY (`Product_Feature_id`)
    REFERENCES `fc_test`.`Product_Feature` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates a Product with a Product_Feature, and designates the applicability of that feature.';


-- -----------------------------------------------------
-- Table `fc_test`.`Required_Feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Required_Feature` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_Feature_Applicability_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Required_Feature_Product_Feature_Applicability1_idx` (`Product_Feature_Applicability_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Required_Feature_Product_Feature_Applicability1`
    FOREIGN KEY (`Product_Feature_Applicability_id`)
    REFERENCES `fc_test`.`Product_Feature_Applicability` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Product_Feature_Applicability, this indicates the associated Product_Feature is mandatory on the associated Product.';


-- -----------------------------------------------------
-- Table `fc_test`.`Optional_Feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Optional_Feature` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_Feature_Applicability_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Optional_Feature_Product_Feature_Applicability1_idx` (`Product_Feature_Applicability_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Optional_Feature_Product_Feature_Applicability1`
    FOREIGN KEY (`Product_Feature_Applicability_id`)
    REFERENCES `fc_test`.`Product_Feature_Applicability` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Product_Feature_Applicability, this indicates the associated Product_Feature is optional on the associated Product. These features may be added, but should not be default.';


-- -----------------------------------------------------
-- Table `fc_test`.`Standard_Feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Standard_Feature` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_Feature_Applicability_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Standard_Feature_Product_Feature_Applicability1_idx` (`Product_Feature_Applicability_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Standard_Feature_Product_Feature_Applicability1`
    FOREIGN KEY (`Product_Feature_Applicability_id`)
    REFERENCES `fc_test`.`Product_Feature_Applicability` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Product_Feature_Applicability, this indicates the associated Product_Feature is a standard feature on the associated Product. These features may be removed, but should be selected by default.';


-- -----------------------------------------------------
-- Table `fc_test`.`Selectable_Feature_Group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Selectable_Feature_Group` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of way that Selectable_Features might be exclusively grouped.';


-- -----------------------------------------------------
-- Table `fc_test`.`Selectable_Feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Selectable_Feature` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_Feature_Applicability_id` INT NOT NULL COMMENT '',
  `Selectable_Feature_Group_id` INT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Selectable_Feature_Product_Feature_Applicability1_idx` (`Product_Feature_Applicability_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Selectable_Feature_Selectable_Feature_Group1_idx` (`Selectable_Feature_Group_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Selectable_Feature_Product_Feature_Applicability1`
    FOREIGN KEY (`Product_Feature_Applicability_id`)
    REFERENCES `fc_test`.`Product_Feature_Applicability` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Selectable_Feature_Selectable_Feature_Group1`
    FOREIGN KEY (`Selectable_Feature_Group_id`)
    REFERENCES `fc_test`.`Selectable_Feature_Group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Product_Feature_Applicability, this indicates the associated Product_Feature is a selectable feature on the associated Product. An option must be selected for these features, but there may be several options to choose between.';


-- -----------------------------------------------------
-- Table `fc_test`.`Supplier_Product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Supplier_Product` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_id` INT NOT NULL COMMENT '',
  `Organization_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `standard_lead_time` TEXT NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Supplier_Product_Product1_idx` (`Product_id` ASC)  COMMENT '',
  INDEX `fk_Supplier_Product_Organization1_idx` (`Organization_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Supplier_Product_Product1`
    FOREIGN KEY (`Product_id`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Supplier_Product_Organization1`
    FOREIGN KEY (`Organization_id`)
    REFERENCES `fc_test`.`Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Association of Organizations and Products, representing a relationship with the organization as a supplier of the product. Has date ranges to designate the time the product is available from that organization, as well as lead time, to tell you how long it generally takes to receive reorders of the product.';


-- -----------------------------------------------------
-- Table `fc_test`.`Reordering_Guidelines`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Reordering_Guidelines` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Good_id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `reorder_quantity` INT NULL COMMENT '',
  `reorder_level` INT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Reordering_Guidelines_Good1_idx` (`Good_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Reordering_Guidelines_Good1`
    FOREIGN KEY (`Good_id`)
    REFERENCES `fc_test`.`Good` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Helper list, so we can store info on how many of a good to keep on hand, and how to reorder effectively.';


-- -----------------------------------------------------
-- Table `fc_test`.`Inventory_Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Inventory_Item` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Good_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Inventory_Item_Good1_idx` (`Good_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Inventory_Item_Good1`
    FOREIGN KEY (`Good_id`)
    REFERENCES `fc_test`.`Good` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This entity represents the physical occurence of a good, which can be tracked, counted, and sold.\n\nTODO: Add connection to Facility to indicate when inventory is stored in a particular place.';


-- -----------------------------------------------------
-- Table `fc_test`.`Serialized_Inventory_Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Serialized_Inventory_Item` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Inventory_Item_id` INT NOT NULL COMMENT '',
  `serial_number` VARCHAR(45) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Serialized_Inventory_Item_Inventory_Item1_idx` (`Inventory_Item_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Serialized_Inventory_Item_Inventory_Item1`
    FOREIGN KEY (`Inventory_Item_id`)
    REFERENCES `fc_test`.`Inventory_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Inventory_Item, representing Products which are individually serial identified. Quantity on hand is always assumed to be 1 or 0, as the item is considered unique.';


-- -----------------------------------------------------
-- Table `fc_test`.`Nonserialized_Inventory_Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Nonserialized_Inventory_Item` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Inventory_Item_id` INT NOT NULL COMMENT '',
  `quantity_on_hand` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Nonserialized_Inventory_Item_Inventory_Item1_idx` (`Inventory_Item_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Nonserialized_Inventory_Item_Inventory_Item1`
    FOREIGN KEY (`Inventory_Item_id`)
    REFERENCES `fc_test`.`Inventory_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Inventory_Item, representing Products which are only identified in bulk. Quantity on hand is tracked for these items.';


-- -----------------------------------------------------
-- Table `fc_test`.`Reason`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Reason` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of reasons given for inventory variances.';


-- -----------------------------------------------------
-- Table `fc_test`.`Inventory_Variance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Inventory_Variance` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `inventory_variance_date` DATETIME NOT NULL COMMENT '',
  `Inventory_Item_id` INT NOT NULL COMMENT '',
  `Reason_id` INT NOT NULL COMMENT '',
  `quantity` INT NOT NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Inventory_Variance_Inventory_Item1_idx` (`Inventory_Item_id` ASC)  COMMENT '',
  INDEX `fk_Inventory_Variance_Reason1_idx` (`Reason_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Inventory_Variance_Inventory_Item1`
    FOREIGN KEY (`Inventory_Item_id`)
    REFERENCES `fc_test`.`Inventory_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Inventory_Variance_Reason1`
    FOREIGN KEY (`Reason_id`)
    REFERENCES `fc_test`.`Reason` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When counting inventory, if the count comes up wrong we want to track that, and an explanation of why.';


-- -----------------------------------------------------
-- Table `fc_test`.`Building`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Building` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Facility_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Building_Facility1_idx` (`Facility_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Building_Facility1`
    FOREIGN KEY (`Facility_id`)
    REFERENCES `fc_test`.`Facility` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Buildings are a subtype of facilities, representing physical buildings in meatspace.';


-- -----------------------------------------------------
-- Table `fc_test`.`Room`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Room` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Facility_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Room_Facility1_idx` (`Facility_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Room_Facility1`
    FOREIGN KEY (`Facility_id`)
    REFERENCES `fc_test`.`Facility` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Rooms are a subtype of facilities, representing physical rooms, generally within buildings, though they don\'t need to be.';


-- -----------------------------------------------------
-- Table `fc_test`.`Facility_Rollup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Facility_Rollup` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Facility_id_parent` INT NOT NULL COMMENT '',
  `Facility_id_child` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Facility_Relationship_Facility1_idx` (`Facility_id_parent` ASC)  COMMENT '',
  INDEX `fk_Facility_Relationship_Facility2_idx` (`Facility_id_child` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Facility_Relationship_Facility1`
    FOREIGN KEY (`Facility_id_parent`)
    REFERENCES `fc_test`.`Facility` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Facility_Relationship_Facility2`
    FOREIGN KEY (`Facility_id_child`)
    REFERENCES `fc_test`.`Facility` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This table allows an arbitrary level of recursion, including facility entities within other facility entities.';


-- -----------------------------------------------------
-- Table `fc_test`.`Price_Component`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Price_Component` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `price` DECIMAL(13,4) NULL COMMENT '',
  `percent` DECIMAL(13,2) NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Final prices of sold goods are often an amalgamation of several pricing brackets and discounts. To support this, we create Price_Component entities for each part of our final price, and sum all the appropriate ones at the time of calculation. We will only use either the price or percent columns in any given row, never both.';


-- -----------------------------------------------------
-- Table `fc_test`.`Quantity_Break`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Quantity_Break` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `from_quantity` INT NOT NULL COMMENT '',
  `thru_quantity` INT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Ranges of values to be used for restricting Price_Component applicability by quantity. If thru_quantity is null or below from_quantity, there is no upper bound to the restriction.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Value`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Value` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `from_amount` DECIMAL(13,4) NOT NULL COMMENT '',
  `thru_amount` DECIMAL(13,4) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Ranges of values to be used for restricting Price_Component applicability by order total. If thru_amount is null or below from_amount, there is no upper bound to the restriction.';


-- -----------------------------------------------------
-- Table `fc_test`.`Sale_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Sale_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of sale types that this Price_Component are applicable to.';


-- -----------------------------------------------------
-- Table `fc_test`.`Base_Price`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Base_Price` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Base_Price_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Base_Price_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Price_Component, this represents the price of the Product, which should then be modified by discounts and surcharges. This may be restricted by any of the _Dependency tables, to allow a plurality of base prices for a single Product.';


-- -----------------------------------------------------
-- Table `fc_test`.`Discount_Component`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Discount_Component` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Discount_Component_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Discount_Component_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Price_Component, this represents a discount that may modify the base price of a Product. This may be restricted by any of the _Dependency tables, to selective apply the discount.';


-- -----------------------------------------------------
-- Table `fc_test`.`Surcharge_Component`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Surcharge_Component` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Surcharge_Component_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Surcharge_Component_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Price_Component, this represents a surcharge that may modify the base price of a Product. This may be restricted by any of the _Dependency tables, to selective apply the surcharge.';


-- -----------------------------------------------------
-- Table `fc_test`.`MSRP`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`MSRP` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_MSRP_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_MSRP_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Price_Component, this represents the Manufacturer\'s Suggested Retail Price of a Product. This may be useful for informational purposes.';


-- -----------------------------------------------------
-- Table `fc_test`.`Estimated_Product_Cost`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Estimated_Product_Cost` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `cost` DECIMAL(13,4) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Cost of bought goods are often an amalgamation of several pricing structures and surcharges. To support this, we create Estimated_Product_Cost entities for each component of our final price, and sum all the appropriate ones at the time of calculation. This cost is estimated, and should be updated as frequently as necessary.';


-- -----------------------------------------------------
-- Table `fc_test`.`Estimated_Materials_Cost`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Estimated_Materials_Cost` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Estimated_Product_Cost_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Estimated_Materials_Cost_Estimated_Product_Cost1_idx` (`Estimated_Product_Cost_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Estimated_Materials_Cost_Estimated_Product_Cost1`
    FOREIGN KEY (`Estimated_Product_Cost_id`)
    REFERENCES `fc_test`.`Estimated_Product_Cost` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Estimated_Product_Cost, this represents the cost of the physical content of a Product.';


-- -----------------------------------------------------
-- Table `fc_test`.`Estimated_Labor_Cost`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Estimated_Labor_Cost` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Estimated_Product_Cost_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Estimated_Labor_Cost_Estimated_Product_Cost1_idx` (`Estimated_Product_Cost_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Estimated_Labor_Cost_Estimated_Product_Cost1`
    FOREIGN KEY (`Estimated_Product_Cost_id`)
    REFERENCES `fc_test`.`Estimated_Product_Cost` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Estimated_Product_Cost, this represents the cost of the labor invested in a Product.';


-- -----------------------------------------------------
-- Table `fc_test`.`Estimated_Other_Costs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Estimated_Other_Costs` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Estimated_Product_Cost_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Estimated_Other_Costs_Estimated_Product_Cost1_idx` (`Estimated_Product_Cost_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Estimated_Other_Costs_Estimated_Product_Cost1`
    FOREIGN KEY (`Estimated_Product_Cost_id`)
    REFERENCES `fc_test`.`Estimated_Product_Cost` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Estimated_Product_Cost, this represents other costs implicit in the composite total.';


-- -----------------------------------------------------
-- Table `fc_test`.`Price_Component_Party_Dependency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Price_Component_Party_Dependency` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Price_Component_Party_Dependency_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  INDEX `fk_Price_Component_Party_Dependency_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Price_Component_Party_Dependency_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Price_Component_Party_Dependency_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Entries in this table restrict a Price_Component to applying only to a particular Party.';


-- -----------------------------------------------------
-- Table `fc_test`.`Price_Component_Product_Category_Dependency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Price_Component_Product_Category_Dependency` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  `Product_Category_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Price_Component_Product_Category_Dependency_Price_Compon_idx` (`Price_Component_id` ASC)  COMMENT '',
  INDEX `fk_Price_Component_Product_Category_Dependency_Product_Cate_idx` (`Product_Category_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Price_Component_Product_Category_Dependency_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Price_Component_Product_Category_Dependency_Product_Catego1`
    FOREIGN KEY (`Product_Category_id`)
    REFERENCES `fc_test`.`Product_Category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Entries in this table restrict a Price_Component to applying only to a particular Product_Category.';


-- -----------------------------------------------------
-- Table `fc_test`.`Price_Sale_Type_Dependency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Price_Sale_Type_Dependency` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  `Sale_Type_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Price_Sale_Type_Dependency_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  INDEX `fk_Price_Sale_Type_Dependency_Sale_Type1_idx` (`Sale_Type_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Price_Sale_Type_Dependency_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Price_Sale_Type_Dependency_Sale_Type1`
    FOREIGN KEY (`Sale_Type_id`)
    REFERENCES `fc_test`.`Sale_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Entries in this table restrict a Price_Component to applying only to a particular Sale_Type.';


-- -----------------------------------------------------
-- Table `fc_test`.`Price_Quantity_Dependency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Price_Quantity_Dependency` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  `Quantity_Break_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Price_Quantity_Dependency_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  INDEX `fk_Price_Quantity_Dependency_Quantity_Break1_idx` (`Quantity_Break_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Price_Quantity_Dependency_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Price_Quantity_Dependency_Quantity_Break1`
    FOREIGN KEY (`Quantity_Break_id`)
    REFERENCES `fc_test`.`Quantity_Break` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Entries in this table restrict a Price_Component to applying only to a particular range of quantities.';


-- -----------------------------------------------------
-- Table `fc_test`.`Price_Order_Value_Dependency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Price_Order_Value_Dependency` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  `Order_Value_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Price_Order_Value_Dependency_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  INDEX `fk_Price_Order_Value_Dependency_Order_Value1_idx` (`Order_Value_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Price_Order_Value_Dependency_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Price_Order_Value_Dependency_Order_Value1`
    FOREIGN KEY (`Order_Value_id`)
    REFERENCES `fc_test`.`Order_Value` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Entries in this table restrict a Price_Component to applying only to a particular range of order values.';


-- -----------------------------------------------------
-- Table `fc_test`.`Price_Component_Product_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Price_Component_Product_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  `Product_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Price_Component_Product_Association_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  INDEX `fk_Price_Component_Product_Association_Product1_idx` (`Product_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Price_Component_Product_Association_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Price_Component_Product_Association_Product1`
    FOREIGN KEY (`Product_id`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates a Price_Component with a Product.';


-- -----------------------------------------------------
-- Table `fc_test`.`Price_Component_Feature_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Price_Component_Feature_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Price_Component_id` INT NOT NULL COMMENT '',
  `Product_Feature_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Price_Component_Feature_Association_Price_Component1_idx` (`Price_Component_id` ASC)  COMMENT '',
  INDEX `fk_Price_Component_Feature_Association_Product_Feature1_idx` (`Product_Feature_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Price_Component_Feature_Association_Price_Component1`
    FOREIGN KEY (`Price_Component_id`)
    REFERENCES `fc_test`.`Price_Component` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Price_Component_Feature_Association_Product_Feature1`
    FOREIGN KEY (`Product_Feature_id`)
    REFERENCES `fc_test`.`Product_Feature` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates a Price_Component with a Product_Feature.';


-- -----------------------------------------------------
-- Table `fc_test`.`Cost_Product_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Cost_Product_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Estimated_Product_Cost_id` INT NOT NULL COMMENT '',
  `Product_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Cost_Product_Association_Estimated_Product_Cost1_idx` (`Estimated_Product_Cost_id` ASC)  COMMENT '',
  INDEX `fk_Cost_Product_Association_Product1_idx` (`Product_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Cost_Product_Association_Estimated_Product_Cost1`
    FOREIGN KEY (`Estimated_Product_Cost_id`)
    REFERENCES `fc_test`.`Estimated_Product_Cost` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cost_Product_Association_Product1`
    FOREIGN KEY (`Product_id`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates an Estimated_Product_Cost with a Product entity.';


-- -----------------------------------------------------
-- Table `fc_test`.`Cost_Feature_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Cost_Feature_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Estimated_Product_Cost_id` INT NOT NULL COMMENT '',
  `Product_Feature_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Cost_Feature_Association_Estimated_Product_Cost1_idx` (`Estimated_Product_Cost_id` ASC)  COMMENT '',
  INDEX `fk_Cost_Feature_Association_Product_Feature1_idx` (`Product_Feature_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Cost_Feature_Association_Estimated_Product_Cost1`
    FOREIGN KEY (`Estimated_Product_Cost_id`)
    REFERENCES `fc_test`.`Estimated_Product_Cost` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cost_Feature_Association_Product_Feature1`
    FOREIGN KEY (`Product_Feature_id`)
    REFERENCES `fc_test`.`Product_Feature` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates an Estimated_Product_Cost with a Product_Feature entity.';


-- -----------------------------------------------------
-- Table `fc_test`.`Cost_Component_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Cost_Component_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of Cost Components';


-- -----------------------------------------------------
-- Table `fc_test`.`Cost_Type_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Cost_Type_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Estimated_Product_Cost_id` INT NOT NULL COMMENT '',
  `Cost_Component_Type_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Cost_Type_Association_Estimated_Product_Cost1_idx` (`Estimated_Product_Cost_id` ASC)  COMMENT '',
  INDEX `fk_Cost_Type_Association_Cost_Component_Type1_idx` (`Cost_Component_Type_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Cost_Type_Association_Estimated_Product_Cost1`
    FOREIGN KEY (`Estimated_Product_Cost_id`)
    REFERENCES `fc_test`.`Estimated_Product_Cost` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cost_Type_Association_Cost_Component_Type1`
    FOREIGN KEY (`Cost_Component_Type_id`)
    REFERENCES `fc_test`.`Cost_Component_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates a Cost_Component_Type description with an Estimated_Product_Cost enity, to describe in more detail where the cost originates from.';


-- -----------------------------------------------------
-- Table `fc_test`.`Cost_Organization_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Cost_Organization_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Estimated_Product_Cost_id` INT NOT NULL COMMENT '',
  `Organization_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Cost_Organization_Association_Estimated_Product_Cost1_idx` (`Estimated_Product_Cost_id` ASC)  COMMENT '',
  INDEX `fk_Cost_Organization_Association_Organization1_idx` (`Organization_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Cost_Organization_Association_Estimated_Product_Cost1`
    FOREIGN KEY (`Estimated_Product_Cost_id`)
    REFERENCES `fc_test`.`Estimated_Product_Cost` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cost_Organization_Association_Organization1`
    FOREIGN KEY (`Organization_id`)
    REFERENCES `fc_test`.`Organization` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'If the cost we are estimating is dependent on a particular organization, or we have multiple suppliers, we can create separate Estimated_Product_Cost entities for each of them.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Component`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Component` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NOT NULL COMMENT '',
  `quantity` INT NULL COMMENT '',
  `instruction` TEXT NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  `Product_id_parent` INT NOT NULL COMMENT '',
  `Product_id_child` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Product_Component_Product1_idx` (`Product_id_parent` ASC)  COMMENT '',
  INDEX `fk_Product_Component_Product2_idx` (`Product_id_child` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Product_Component_Product1`
    FOREIGN KEY (`Product_id_parent`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Component_Product2`
    FOREIGN KEY (`Product_id_child`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When one Product is a component in another Product, it is helpful to record that information. This table stores those relationships, as well as how many components are used in the parent Product, instructions on how they relate, and the date range this relationship is valid through.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Substitute`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Substitute` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '	',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NOT NULL COMMENT '',
  `quantity` INT NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  `Product_id_original` INT NOT NULL COMMENT '',
  `Product_id_substitute` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Product_Substitute_Product1_idx` (`Product_id_original` ASC)  COMMENT '',
  INDEX `fk_Product_Substitute_Product2_idx` (`Product_id_substitute` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Product_Substitute_Product1`
    FOREIGN KEY (`Product_id_original`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Substitute_Product2`
    FOREIGN KEY (`Product_id_substitute`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When one Product is a reasonable substitute for another Product, it is helpful to record that information. This table stores those relationships, as well as how many objects the substitute can replace, and the date range this relationship is valid through. (Quantity can be relevant, example: 1 box of 12 pencils can substitute for 12 pencils)';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Obsolescense`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Obsolescense` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `supercession_date` DATE NOT NULL COMMENT '',
  `reason` TEXT NULL COMMENT '',
  `Product_id_original` INT NOT NULL COMMENT '',
  `Product_id_replacement` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Product_Obsolescense_Product1_idx` (`Product_id_original` ASC)  COMMENT '',
  INDEX `fk_Product_Obsolescense_Product2_idx` (`Product_id_replacement` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Product_Obsolescense_Product1`
    FOREIGN KEY (`Product_id_original`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Obsolescense_Product2`
    FOREIGN KEY (`Product_id_replacement`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When one Product is being discontinued, and superceded by another Product, it is helpful to record that information. This table stores those relationships, as well as the reason for the depreciation, and the date of obscelescence.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Complement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Complement` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `reason` TEXT NULL COMMENT '',
  `Product_id_a` INT NOT NULL COMMENT '',
  `Product_id_b` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Product_Complement_Product1_idx` (`Product_id_a` ASC)  COMMENT '',
  INDEX `fk_Product_Complement_Product2_idx` (`Product_id_b` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Product_Complement_Product1`
    FOREIGN KEY (`Product_id_a`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Complement_Product2`
    FOREIGN KEY (`Product_id_b`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When one Product is well accompanied by another Product, it is helpful to record that information. This table stores those relationships, as well as the reason for the complementation, and the date range the relationship is valid through.';


-- -----------------------------------------------------
-- Table `fc_test`.`Product_Incompatibility`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Product_Incompatibility` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `reason` TEXT NULL COMMENT '',
  `Product_id_a` INT NOT NULL COMMENT '',
  `Product_id_b` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Product_Incompatibility_Product1_idx` (`Product_id_a` ASC)  COMMENT '',
  INDEX `fk_Product_Incompatibility_Product2_idx` (`Product_id_b` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Product_Incompatibility_Product1`
    FOREIGN KEY (`Product_id_a`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Incompatibility_Product2`
    FOREIGN KEY (`Product_id_b`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When one Product is incompatible with another Product, it is helpful to record that information. This table stores those relationships, as well as the reason for the incompatibility, and the date range the relationship is valid through.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '	',
  `order_date` DATE NOT NULL COMMENT '',
  `entry_date` DATE NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of all orders in the system, comprising both Purchase_Order entities, and Sales_Order entities. Stores all items associated with the order, the parties and communication mechanisms that are involved in the order, and all roles associated with those parties and communication mechanisms.';


-- -----------------------------------------------------
-- Table `fc_test`.`Sales_Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Sales_Order` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Sales_Order_Order1_idx` (`Order_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Sales_Order_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fc_test`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order representing Sales Orders, selling Products to Customers.';


-- -----------------------------------------------------
-- Table `fc_test`.`Purchase_Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Purchase_Order` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Purchase_Order_Order1_idx` (`Order_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Purchase_Order_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fc_test`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order representing Purchase Orders, buying items from suppliers, etc.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Item` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_id` INT NOT NULL COMMENT '',
  `Product_Feature_id` INT NULL COMMENT '',
  `Product_id` INT NULL COMMENT '',
  `ordered_with_id` INT NULL COMMENT '',
  `quantity` INT NULL COMMENT '',
  `unit_price` DECIMAL(13,4) NULL COMMENT '',
  `estimated_delivery_date` DATE NULL COMMENT '',
  `shipping_instructions` TEXT NULL COMMENT '',
  `item_description` TEXT NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Order_Item_Product_Feature1_idx` (`Product_Feature_id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Product1_idx` (`Product_id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Order_Item1_idx` (`ordered_with_id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Order1_idx` (`Order_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Item_Product_Feature1`
    FOREIGN KEY (`Product_Feature_id`)
    REFERENCES `fc_test`.`Product_Feature` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Item_Product1`
    FOREIGN KEY (`Product_id`)
    REFERENCES `fc_test`.`Product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Item_Order_Item1`
    FOREIGN KEY (`ordered_with_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Item_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fc_test`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Each item in a given order gets its own reference in this list. Subclasses exist for Order Items depending on whether the order is a Purchase_Order or a Sales_Order. Order_Items can contain other Order_Items recursively, and this is represented by ordered_with_id';


-- -----------------------------------------------------
-- Table `fc_test`.`Purchase_Order_Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Purchase_Order_Item` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Item_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Purchase_Order_Item_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Purchase_Order_Item_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order_Item, representing items being purchased by the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Sales_Order_Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Sales_Order_Item` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Item_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Sales_Order_Item_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Sales_Order_Item_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order_Item, representing items being sold by the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Event_Role_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Event_Role_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of roles to be referenced by a Communication_Event_Role entity';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Event_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Event_Role` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `Communication_Event_id` INT NOT NULL COMMENT '',
  `Communication_Event_Role_Type_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Communication_Event_Role_Communication_Event1_idx` (`Communication_Event_id` ASC)  COMMENT '',
  INDEX `fk_Communication_Event_Role_Communication_Event_Role_Type1_idx` (`Communication_Event_Role_Type_id` ASC)  COMMENT '',
  INDEX `fk_Communication_Event_Role_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Communication_Event_Role_Communication_Event1`
    FOREIGN KEY (`Communication_Event_id`)
    REFERENCES `fc_test`.`Communication_Event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Communication_Event_Role_Communication_Event_Role_Type1`
    FOREIGN KEY (`Communication_Event_Role_Type_id`)
    REFERENCES `fc_test`.`Communication_Event_Role_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Communication_Event_Role_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Used for >= 3-party communications to log each party involved in a Communication_Event and their respective roles in that event. The same party could also hold several roles in the event.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Item_Role_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Item_Role_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of roles that may be applied to an actor who is party to an Order_Item.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Item_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Item_Role` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `Order_Item_id` INT NOT NULL COMMENT '',
  `Order_Item_Role_Type_id` INT NOT NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Order_Item_Role_Order_Item_Role_Type1_idx` (`Order_Item_Role_Type_id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Role_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Role_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Item_Role_Order_Item_Role_Type1`
    FOREIGN KEY (`Order_Item_Role_Type_id`)
    REFERENCES `fc_test`.`Order_Item_Role_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Item_Role_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Item_Role_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Links a party to the Order_Item as an arbitrary role, allowing for easy referencing parties involved in individual items from a larger order.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Role_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Role_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of roles that may be applied to an actor who is party to an Order.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Role` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `Order_id` INT NOT NULL COMMENT '',
  `Order_Role_Type_id` INT NOT NULL COMMENT '',
  `percent_contribution` DECIMAL(13,2) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Order_Role_Order1_idx` (`Order_id` ASC)  COMMENT '',
  INDEX `fk_Order_Role_Order_Role_Type1_idx` (`Order_Role_Type_id` ASC)  COMMENT '',
  INDEX `fk_Order_Role_Party1_idx` (`Party_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Role_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fc_test`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Role_Order_Role_Type1`
    FOREIGN KEY (`Order_Role_Type_id`)
    REFERENCES `fc_test`.`Order_Role_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Role_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Links a party to the Order as an arbitrary role, allowing for easy referencing parties involved in the entire order.';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Mechanism_Purpose_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Mechanism_Purpose_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Used to define the purpose of a given linked Communication_Mechanism.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Communication_Mechanism`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Communication_Mechanism` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_id` INT NOT NULL COMMENT '',
  `Communication_Mechanism_id` INT NOT NULL COMMENT '',
  `Communication_Mechanism_Purpose_Type_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Order_Contact_Mechanism_Order1_idx` (`Order_id` ASC)  COMMENT '',
  INDEX `fk_Order_Contact_Mechanism_Communication_Mechanism1_idx` (`Communication_Mechanism_id` ASC)  COMMENT '',
  INDEX `fk_Order_Communication_Mechanism_Communication_Mechanism_Pu_idx` (`Communication_Mechanism_Purpose_Type_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Contact_Mechanism_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fc_test`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Contact_Mechanism_Communication_Mechanism1`
    FOREIGN KEY (`Communication_Mechanism_id`)
    REFERENCES `fc_test`.`Communication_Mechanism` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Communication_Mechanism_Communication_Mechanism_Purp1`
    FOREIGN KEY (`Communication_Mechanism_Purpose_Type_id`)
    REFERENCES `fc_test`.`Communication_Mechanism_Purpose_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Communication_Mechanism entities that are related to the entire Order should be added to this list.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Item_Communication_Mechanism`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Item_Communication_Mechanism` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Item_id` INT NOT NULL COMMENT '',
  `Communication_Mechanism_id` INT NOT NULL COMMENT '',
  `Communication_Mechanism_Purpose_Type_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Order_Item_Communication_Mechanism_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Communication_Mechanism_Communication_Mechani_idx` (`Communication_Mechanism_id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Communication_Mechanism_Communication_Mechani_idx1` (`Communication_Mechanism_Purpose_Type_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Item_Communication_Mechanism_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Item_Communication_Mechanism_Communication_Mechanism1`
    FOREIGN KEY (`Communication_Mechanism_id`)
    REFERENCES `fc_test`.`Communication_Mechanism` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Item_Communication_Mechanism_Communication_Mechanism2`
    FOREIGN KEY (`Communication_Mechanism_Purpose_Type_id`)
    REFERENCES `fc_test`.`Communication_Mechanism_Purpose_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Communication_Mechanism entities that are related to a specific Order_Item from a larger Order should be added to this list.';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Event_Purpose_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Event_Purpose_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of purpose types to be referenced by a Community_Event_Purpose entity.';


-- -----------------------------------------------------
-- Table `fc_test`.`Communication_Event_Purpose`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Communication_Event_Purpose` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Communication_Event_id` INT NOT NULL COMMENT '',
  `Communication_Event_Purpose_Type_id` INT NOT NULL COMMENT '',
  `comment` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Communication_Event_Purpose_Communication_Event1_idx` (`Communication_Event_id` ASC)  COMMENT '',
  INDEX `fk_Communication_Event_Purpose_Communication_Event_Purpose__idx` (`Communication_Event_Purpose_Type_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  CONSTRAINT `fk_Communication_Event_Purpose_Communication_Event1`
    FOREIGN KEY (`Communication_Event_id`)
    REFERENCES `fc_test`.`Communication_Event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Communication_Event_Purpose_Communication_Event_Purpose_Ty1`
    FOREIGN KEY (`Communication_Event_Purpose_Type_id`)
    REFERENCES `fc_test`.`Communication_Event_Purpose_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates some purpose(s) with a Communication_Event entity, describing the goals and purposes of the event by referencing a Communication_Event_Purpose_Type for the purpose discriptions.';


-- -----------------------------------------------------
-- Table `fc_test`.`Alternate_Search_String`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Alternate_Search_String` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Good_Identification_id` INT NOT NULL COMMENT '',
  `search_string` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Alternate_Search_String_Good_Identification1_idx` (`Good_Identification_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Alternate_Search_String_Good_Identification1`
    FOREIGN KEY (`Good_Identification_id`)
    REFERENCES `fc_test`.`Good_Identification` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'List of query keywords that should return the linked Good.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Adjustment_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Adjustment_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of reasons for order adjustment.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Adjustment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Adjustment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_id` INT NULL COMMENT '',
  `Order_Item_id` INT NULL COMMENT '',
  `Order_Adjustment_Type_id` INT NULL COMMENT '',
  `amount` DECIMAL(13,4) NULL COMMENT '',
  `percentage` DECIMAL(13,2) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Order_Adjustment_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  INDEX `fk_Order_Adjustment_Order1_idx` (`Order_id` ASC)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Order_Adjustment_Order_Adjustment_Type1_idx` (`Order_Adjustment_Type_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Adjustment_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Adjustment_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fc_test`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Adjustment_Order_Adjustment_Type1`
    FOREIGN KEY (`Order_Adjustment_Type_id`)
    REFERENCES `fc_test`.`Order_Adjustment_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'There are often other adjustments to order totals that need to be factored in, and this entity tracks those adjustments. These can be applied to either Order entities, or Order_Item entities.';


-- -----------------------------------------------------
-- Table `fc_test`.`Miscellaneous_Charge`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Miscellaneous_Charge` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Adjustment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Miscellaneous_Charge_Order_Adjustment1_idx` (`Order_Adjustment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Miscellaneous_Charge_Order_Adjustment1`
    FOREIGN KEY (`Order_Adjustment_id`)
    REFERENCES `fc_test`.`Order_Adjustment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order_Adjustment, this adjustment is due to miscellaneous charges.';


-- -----------------------------------------------------
-- Table `fc_test`.`Discount_Adjustment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Discount_Adjustment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Adjustment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Discount_Adjustment_Order_Adjustment1_idx` (`Order_Adjustment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Discount_Adjustment_Order_Adjustment1`
    FOREIGN KEY (`Order_Adjustment_id`)
    REFERENCES `fc_test`.`Order_Adjustment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order_Adjustment, this adjustment is due to discounts applied.';


-- -----------------------------------------------------
-- Table `fc_test`.`Surcharge_Adjustment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Surcharge_Adjustment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Adjustment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Surcharge_Adjustment_Order_Adjustment1_idx` (`Order_Adjustment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Surcharge_Adjustment_Order_Adjustment1`
    FOREIGN KEY (`Order_Adjustment_id`)
    REFERENCES `fc_test`.`Order_Adjustment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order_Adjustment, this adjustment is due to surcharges levied.';


-- -----------------------------------------------------
-- Table `fc_test`.`Sales_Tax`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Sales_Tax` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Adjustment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Sales_Tax_Order_Adjustment1_idx` (`Order_Adjustment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Sales_Tax_Order_Adjustment1`
    FOREIGN KEY (`Order_Adjustment_id`)
    REFERENCES `fc_test`.`Order_Adjustment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order_Adjustment, this adjustment is due to Sales Tax.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipping_and_Handling`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipping_and_Handling` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Adjustment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Shipping_and_Handling_Order_Adjustment1_idx` (`Order_Adjustment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Shipping_and_Handling_Order_Adjustment1`
    FOREIGN KEY (`Order_Adjustment_id`)
    REFERENCES `fc_test`.`Order_Adjustment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order_Adjustment, this adjustment is due to Shipping & Handling.';


-- -----------------------------------------------------
-- Table `fc_test`.`Fee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Fee` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_Adjustment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Fee_Order_Adjustment1_idx` (`Order_Adjustment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Fee_Order_Adjustment1`
    FOREIGN KEY (`Order_Adjustment_id`)
    REFERENCES `fc_test`.`Order_Adjustment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Order_Adjustment, this adjustment is due to fees levied.';


-- -----------------------------------------------------
-- Table `fc_test`.`Sales_Tax_Lookup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Sales_Tax_Lookup` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Product_Category_id` INT NULL COMMENT '',
  `percentage` DECIMAL(13,2) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Sales_Tax_Lookup_Product_Category1_idx` (`Product_Category_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Sales_Tax_Lookup_Product_Category1`
    FOREIGN KEY (`Product_Category_id`)
    REFERENCES `fc_test`.`Product_Category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Restricts tax rates according to Product_Category.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Term_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Term_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of potential terms to be applied to an Order or Order_Item.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Term`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Term` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_id` INT NULL COMMENT '',
  `Order_Item_id` INT NULL COMMENT '',
  `Order_Term_Type_id` INT NOT NULL COMMENT '',
  `term_value` DECIMAL(13,4) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Order_Term_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  INDEX `fk_Order_Term_Order1_idx` (`Order_id` ASC)  COMMENT '',
  INDEX `fk_Order_Term_Order_Term_Type1_idx` (`Order_Term_Type_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Term_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Term_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fc_test`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Term_Order_Term_Type1`
    FOREIGN KEY (`Order_Term_Type_id`)
    REFERENCES `fc_test`.`Order_Term_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Defines Terms for orders, accepting either an Order or Order_Item as the target, but not both. The description for the terms exists in Order_Term_Type.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Status_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Status_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of potential statuses to be applied to an Order or Order_Item.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Status` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Order_id` INT NULL COMMENT '',
  `Order_Item_id` INT NULL COMMENT '',
  `Order_Status_Type_id` INT NOT NULL COMMENT '',
  `status_datetime` DATETIME NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Order_Status_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  INDEX `fk_Order_Status_Order1_idx` (`Order_id` ASC)  COMMENT '',
  INDEX `fk_Order_Status_Order_Status_Type1_idx` (`Order_Status_Type_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Status_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Status_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fc_test`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Status_Order_Status_Type1`
    FOREIGN KEY (`Order_Status_Type_id`)
    REFERENCES `fc_test`.`Order_Status_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Stores status updates for orders, accepting either an Order or Order_Item as the target, but not both. The description for the statuses exist in Order_Status_Type.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Item_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Item_Association` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Purchase_Order_Item_id` INT NOT NULL COMMENT '',
  `Sales_Order_Item_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`, `Purchase_Order_Item_id`, `Sales_Order_Item_id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Association_Purchase_Order_Item1_idx` (`Purchase_Order_Item_id` ASC)  COMMENT '',
  INDEX `fk_Order_Item_Association_Sales_Order_Item1_idx` (`Sales_Order_Item_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Item_Association_Purchase_Order_Item1`
    FOREIGN KEY (`Purchase_Order_Item_id`)
    REFERENCES `fc_test`.`Purchase_Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Item_Association_Sales_Order_Item1`
    FOREIGN KEY (`Sales_Order_Item_id`)
    REFERENCES `fc_test`.`Sales_Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When an item on a Purchase Order is being ordered to fill a specific Sales Order, we should associate those items, so we can more easily keep track of them.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `Party_id1` INT NOT NULL COMMENT '',
  `Address_id` INT NOT NULL COMMENT '',
  `Address_id1` INT NOT NULL COMMENT '',
  `Phone_Number_id` INT NOT NULL COMMENT '',
  `estimated_ship_date` DATE NOT NULL COMMENT '',
  `estimated_ready_date` DATE NULL COMMENT 'Base class representing a shipment either in or out of the business.',
  `estimated_arrival_date` DATE NULL COMMENT '',
  `estimated_ship_cost` DECIMAL(13,4) NULL COMMENT '',
  `actual_ship_cost` DECIMAL(13,4) NULL COMMENT '',
  `latest_cancel_date` DATE NULL COMMENT '',
  `handling_instructions` TEXT NULL COMMENT '',
  `last_updated` TIMESTAMP NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Address1_idx` (`Address_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Address2_idx` (`Address_id1` ASC)  COMMENT '',
  INDEX `fk_Shipment_Party1_idx` (`Party_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Party2_idx` (`Party_id1` ASC)  COMMENT '',
  INDEX `fk_Shipment_Phone_Number1_idx` (`Phone_Number_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Shipment_Address1`
    FOREIGN KEY (`Address_id`)
    REFERENCES `fc_test`.`Address` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Address2`
    FOREIGN KEY (`Address_id1`)
    REFERENCES `fc_test`.`Address` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Party2`
    FOREIGN KEY (`Party_id1`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Phone_Number1`
    FOREIGN KEY (`Phone_Number_id`)
    REFERENCES `fc_test`.`Phone_Number` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Base class for tracking known information about shipments of goods in or out of the business. Has several sub-classes, and links to a handful of other entities.\n\nParty_id - Shipped From\nParty_id1 - Shipped To\nAddress_id - Shipped From\nAddress_id1 - Shipped To\nPhone_Number_id - Contact phone number';


-- -----------------------------------------------------
-- Table `fc_test`.`Outgoing_Shipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Outgoing_Shipment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Outgoing_Shipment_Shipment1_idx` (`Shipment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Outgoing_Shipment_Shipment1`
    FOREIGN KEY (`Shipment_id`)
    REFERENCES `fc_test`.`Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Shipment, representing shipments of goods leaving the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Incoming_Shipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Incoming_Shipment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Incoming_Shipment_Shipment1_idx` (`Shipment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Incoming_Shipment_Shipment1`
    FOREIGN KEY (`Shipment_id`)
    REFERENCES `fc_test`.`Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Shipment, representing shipments of goods traveling to the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Customer_Shipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Customer_Shipment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Outgoing_Shipment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Customer_Shipment_Outgoing_Shipment1_idx` (`Outgoing_Shipment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Customer_Shipment_Outgoing_Shipment1`
    FOREIGN KEY (`Outgoing_Shipment_id`)
    REFERENCES `fc_test`.`Outgoing_Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Outgoing_Shipment, representing shipments of goods from the business to the customer.';


-- -----------------------------------------------------
-- Table `fc_test`.`Purchase_Return`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Purchase_Return` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Outgoing_Shipment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Purchase_Return_Outgoing_Shipment1_idx` (`Outgoing_Shipment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Purchase_Return_Outgoing_Shipment1`
    FOREIGN KEY (`Outgoing_Shipment_id`)
    REFERENCES `fc_test`.`Outgoing_Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Outgoing_Shipment, representing shipments returning goods purchased to suppliers.';


-- -----------------------------------------------------
-- Table `fc_test`.`Purchase_Shipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Purchase_Shipment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Incoming_Shipment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Purchase_Shipment_Incoming_Shipment1_idx` (`Incoming_Shipment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Purchase_Shipment_Incoming_Shipment1`
    FOREIGN KEY (`Incoming_Shipment_id`)
    REFERENCES `fc_test`.`Incoming_Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Incoming_Shipment, representing shipments from suppliers to the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Customer_Return`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Customer_Return` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Incoming_Shipment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Customer_Return_Incoming_Shipment1_idx` (`Incoming_Shipment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Customer_Return_Incoming_Shipment1`
    FOREIGN KEY (`Incoming_Shipment_id`)
    REFERENCES `fc_test`.`Incoming_Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Incoming_Shipment, representing returns of goods from customers to the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Transfer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Transfer` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Transfer_Shipment1_idx` (`Shipment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Transfer_Shipment1`
    FOREIGN KEY (`Shipment_id`)
    REFERENCES `fc_test`.`Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Shipment, representing transfer of goods within the business.';


-- -----------------------------------------------------
-- Table `fc_test`.`Drop_Shipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Drop_Shipment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Drop_Shipment_Shipment1_idx` (`Shipment_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Drop_Shipment_Shipment1`
    FOREIGN KEY (`Shipment_id`)
    REFERENCES `fc_test`.`Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Subclass of Shipment, representing shipments of goods heading to customers, but originating at a third address, never coming to the business first.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment_Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment_Item` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Good_id` INT NULL COMMENT '',
  `Shipment_id` INT NOT NULL COMMENT '',
  `in_response_to` INT NULL COMMENT '',
  `quantity` INT NOT NULL COMMENT '',
  `shipment_contents_description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Item_Good1_idx` (`Good_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Item_Shipment1_idx` (`Shipment_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Item_Shipment_Item1_idx` (`in_response_to` ASC)  COMMENT '',
  CONSTRAINT `fk_Shipment_Item_Good1`
    FOREIGN KEY (`Good_id`)
    REFERENCES `fc_test`.`Good` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Item_Shipment1`
    FOREIGN KEY (`Shipment_id`)
    REFERENCES `fc_test`.`Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Item_Shipment_Item1`
    FOREIGN KEY (`in_response_to`)
    REFERENCES `fc_test`.`Shipment_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When tracking shipments, we want to know what to expect in a given shipment. Shipment_Item entities store information on the contents of shipments. If the item being shipped is already a Good in our system, we fill Good_id. Otherwise, we describe the product in shipment_contents_description. If an item is shipped more than once, we can link the newer Shipment_Item to the older one, to keep track of unique items on multiple shipments.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment_Status_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment_Status_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of status types to be linked to by Shipment_Status.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment_Status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment_Status` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_id` INT NOT NULL COMMENT '',
  `Shipment_Status_Type_id` INT NOT NULL COMMENT '',
  `status_timestamp` TIMESTAMP NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Status_Shipment1_idx` (`Shipment_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Status_Shipment_Status_Type1_idx` (`Shipment_Status_Type_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Shipment_Status_Shipment1`
    FOREIGN KEY (`Shipment_id`)
    REFERENCES `fc_test`.`Shipment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Status_Shipment_Status_Type1`
    FOREIGN KEY (`Shipment_Status_Type_id`)
    REFERENCES `fc_test`.`Shipment_Status_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Used to track changes to status of a shipment, with a timestamp and a link to a description of the new status type.';


-- -----------------------------------------------------
-- Table `fc_test`.`Order_Shipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Order_Shipment` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_Item_id` INT NOT NULL COMMENT '',
  `Order_Item_id` INT NOT NULL COMMENT '',
  `quantity` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Order_Shipment_Shipment_Item1_idx` (`Shipment_Item_id` ASC)  COMMENT '',
  INDEX `fk_Order_Shipment_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Order_Shipment_Shipment_Item1`
    FOREIGN KEY (`Shipment_Item_id`)
    REFERENCES `fc_test`.`Shipment_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Shipment_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Association between Order_Item entities and their corresponding Shipment_Item entities.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment_Item_Feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment_Item_Feature` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_Item_id` INT NOT NULL COMMENT '',
  `Product_Feature_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Item_Feature_Shipment_Item1_idx` (`Shipment_Item_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Item_Feature_Product_Feature1_idx` (`Product_Feature_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Shipment_Item_Feature_Shipment_Item1`
    FOREIGN KEY (`Shipment_Item_id`)
    REFERENCES `fc_test`.`Shipment_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Item_Feature_Product_Feature1`
    FOREIGN KEY (`Product_Feature_id`)
    REFERENCES `fc_test`.`Product_Feature` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Association between Product_Feature entities and Shipment_Item entities that have them as features.';


-- -----------------------------------------------------
-- Table `fc_test`.`Rejection_Reason`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Rejection_Reason` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'If any of a shipment is rejected, we link to a reason for doing so.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment_Package`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment_Package` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `date_created` DATE NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'All shipments come in \"Packages\", even if that package is the single item. This is a list of packages that receipts can belong to. It is associated with an arbitrary number of Shipment_Receipts and Shipment_Items, ideally matching ones.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment_Receipt`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment_Receipt` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_Package_id` INT NOT NULL COMMENT '',
  `Good_id` INT NULL COMMENT '',
  `Order_Item_id` INT NULL COMMENT '',
  `Inventory_Item_id` INT NOT NULL COMMENT '',
  `Rejection_Reason_id` INT NULL COMMENT '',
  `datetime_received` DATETIME NOT NULL COMMENT '',
  `item_description` TEXT NOT NULL COMMENT '',
  `quantity_accepted` INT NOT NULL COMMENT '',
  `quantity_rejected` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Receipt_Rejection_Reason1_idx` (`Rejection_Reason_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Receipt_Shipment_Package1_idx` (`Shipment_Package_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Receipt_Good1_idx` (`Good_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Receipt_Inventory_Item1_idx` (`Inventory_Item_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Receipt_Order_Item1_idx` (`Order_Item_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Shipment_Receipt_Rejection_Reason1`
    FOREIGN KEY (`Rejection_Reason_id`)
    REFERENCES `fc_test`.`Rejection_Reason` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Receipt_Shipment_Package1`
    FOREIGN KEY (`Shipment_Package_id`)
    REFERENCES `fc_test`.`Shipment_Package` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Receipt_Good1`
    FOREIGN KEY (`Good_id`)
    REFERENCES `fc_test`.`Good` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Receipt_Inventory_Item1`
    FOREIGN KEY (`Inventory_Item_id`)
    REFERENCES `fc_test`.`Inventory_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Receipt_Order_Item1`
    FOREIGN KEY (`Order_Item_id`)
    REFERENCES `fc_test`.`Order_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When receiving an item from a shipment, we store the information on what is received in a Shipment_Receipt entity. This has an optional link to a Good_id, if we are receiving an existing product. It also has an optional link to an Order_Item, if the received product was ordered, we can track the progress from order to receipt. It has a mandatory link to an Inventory_Item entity, for putting the object into stock.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment_Receipt_Role_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment_Receipt_Role_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of Shipment Receipt Role Types, for linking to from Shipment_Receipt_Role.';


-- -----------------------------------------------------
-- Table `fc_test`.`Shipment_Receipt_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Shipment_Receipt_Role` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `Shipment_Receipt_id` INT NOT NULL COMMENT '',
  `Shipment_Receipt_Role_Type_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Receipt_Role_Shipment_Receipt1_idx` (`Shipment_Receipt_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Receipt_Role_Shipment_Receipt_Role_Type1_idx` (`Shipment_Receipt_Role_Type_id` ASC)  COMMENT '',
  INDEX `fk_Shipment_Receipt_Role_Party1_idx` (`Party_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Shipment_Receipt_Role_Shipment_Receipt1`
    FOREIGN KEY (`Shipment_Receipt_id`)
    REFERENCES `fc_test`.`Shipment_Receipt` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Receipt_Role_Shipment_Receipt_Role_Type1`
    FOREIGN KEY (`Shipment_Receipt_Role_Type_id`)
    REFERENCES `fc_test`.`Shipment_Receipt_Role_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Shipment_Receipt_Role_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'We can associate parties with the Shipment_Receipt entity in various arbitrary roles. This associates the three tables.';


-- -----------------------------------------------------
-- Table `fc_test`.`Packaging_Content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Packaging_Content` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Shipment_Package_id` INT NOT NULL COMMENT '',
  `Shipment_Item_id` INT NOT NULL COMMENT '',
  `qty` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Packaging_Content_Shipment_Package1_idx` (`Shipment_Package_id` ASC)  COMMENT '',
  INDEX `fk_Packaging_Content_Shipment_Item1_idx` (`Shipment_Item_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Packaging_Content_Shipment_Package1`
    FOREIGN KEY (`Shipment_Package_id`)
    REFERENCES `fc_test`.`Shipment_Package` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Packaging_Content_Shipment_Item1`
    FOREIGN KEY (`Shipment_Item_id`)
    REFERENCES `fc_test`.`Shipment_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates Shipment_Packages with Shipment_Items, indicating how many of a particular item from a larger shipment was in a particular package. This allows splitting shipments between packages.';


-- -----------------------------------------------------
-- Table `fc_test`.`Picklist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Picklist` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `date_created` DATE NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'This is the list of items to collect and remove from inventory.';


-- -----------------------------------------------------
-- Table `fc_test`.`Picklist_Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Picklist_Item` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `quantity` INT NOT NULL COMMENT '',
  `Picklist_id` INT NOT NULL COMMENT '',
  `Inventory_Item_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Picklist_Item_Picklist1_idx` (`Picklist_id` ASC)  COMMENT '',
  INDEX `fk_Picklist_Item_Inventory_Item1_idx` (`Inventory_Item_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Picklist_Item_Picklist1`
    FOREIGN KEY (`Picklist_id`)
    REFERENCES `fc_test`.`Picklist` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Picklist_Item_Inventory_Item1`
    FOREIGN KEY (`Inventory_Item_id`)
    REFERENCES `fc_test`.`Inventory_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'If items in an issuance need to be collected, they can be added to a Picklist, as a temporary list of items to seek out in the field.';


-- -----------------------------------------------------
-- Table `fc_test`.`Issuance_Reason`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Issuance_Reason` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'We often want to tag issuances with an explanation for why we removed this from the inventory, if it is not immediately apparent.';


-- -----------------------------------------------------
-- Table `fc_test`.`Item_Issuance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Item_Issuance` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Inventory_Item_id` INT NOT NULL COMMENT '',
  `Shipment_Item_id` INT NULL COMMENT '',
  `Picklist_Item_id` INT NULL COMMENT '',
  `Issuance_Reason_id` INT NULL COMMENT '',
  `issued_datetime` DATETIME NOT NULL COMMENT '',
  `quantity` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Item_Issuance_Inventory_Item1_idx` (`Inventory_Item_id` ASC)  COMMENT '',
  INDEX `fk_Item_Issuance_Picklist_Item1_idx` (`Picklist_Item_id` ASC)  COMMENT '',
  INDEX `fk_Item_Issuance_Shipment_Item1_idx` (`Shipment_Item_id` ASC)  COMMENT '',
  INDEX `fk_Item_Issuance_Issuance_Reason1_idx` (`Issuance_Reason_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Item_Issuance_Inventory_Item1`
    FOREIGN KEY (`Inventory_Item_id`)
    REFERENCES `fc_test`.`Inventory_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Item_Issuance_Picklist_Item1`
    FOREIGN KEY (`Picklist_Item_id`)
    REFERENCES `fc_test`.`Picklist_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Item_Issuance_Shipment_Item1`
    FOREIGN KEY (`Shipment_Item_id`)
    REFERENCES `fc_test`.`Shipment_Item` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Item_Issuance_Issuance_Reason1`
    FOREIGN KEY (`Issuance_Reason_id`)
    REFERENCES `fc_test`.`Issuance_Reason` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'When we remove items from our inventory, we need to record that via an Issuance. This could be for shipping, for store useing, or for giving away as prizes, etc. Requires an Inventory_Item, as we can\'t issue something we don\'t inventory.';


-- -----------------------------------------------------
-- Table `fc_test`.`Item_Issuance_Role_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Item_Issuance_Role_Type` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of Issuance Role Types, to be linked by Item_Issuance_Role.';


-- -----------------------------------------------------
-- Table `fc_test`.`Item_Issuance_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Item_Issuance_Role` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `Item_Issuance_id` INT NOT NULL COMMENT '',
  `Item_Issuance_Role_Type_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  UNIQUE INDEX `id_UNIQUE` (`id` ASC)  COMMENT '',
  INDEX `fk_Item_Issuance_Role_Item_Issuance1_idx` (`Item_Issuance_id` ASC)  COMMENT '',
  INDEX `fk_Item_Issuance_Role_Item_Issuance_Role_Type1_idx` (`Item_Issuance_Role_Type_id` ASC)  COMMENT '',
  INDEX `fk_Item_Issuance_Role_Party1_idx` (`Party_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Item_Issuance_Role_Item_Issuance1`
    FOREIGN KEY (`Item_Issuance_id`)
    REFERENCES `fc_test`.`Item_Issuance` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Item_Issuance_Role_Item_Issuance_Role_Type1`
    FOREIGN KEY (`Item_Issuance_Role_Type_id`)
    REFERENCES `fc_test`.`Item_Issuance_Role_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Item_Issuance_Role_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Different parties serve different roles in relation to the issuance of items. This entity associates an Item_Issuance, a Party, and an Item_Issuance_Role_Type.';


-- -----------------------------------------------------
-- Table `fc_test`.`Event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Event` (
  `id` INT NOT NULL COMMENT '',
  `name` TEXT NULL COMMENT '',
  `description` TEXT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Events are represented by a name, description, and other useful information. This table serves as the base entity that other data will associate with.';


-- -----------------------------------------------------
-- Table `fc_test`.`Event_Party_Association`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Event_Party_Association` (
  `id` INT NOT NULL COMMENT '',
  `Party_id` INT NOT NULL COMMENT '',
  `Event_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Event_Party_Association_Party1_idx` (`Party_id` ASC)  COMMENT '',
  INDEX `fk_Event_Party_Association_Event1_idx` (`Event_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Event_Party_Association_Party1`
    FOREIGN KEY (`Party_id`)
    REFERENCES `fc_test`.`Party` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Event_Party_Association_Event1`
    FOREIGN KEY (`Event_id`)
    REFERENCES `fc_test`.`Event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Associates a party with an event in some role defined by Event_Party_Association_Role.';


-- -----------------------------------------------------
-- Table `fc_test`.`Event_Party_Association_Role_Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Event_Party_Association_Role_Type` (
  `id` INT NOT NULL COMMENT '',
  `description` TEXT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'List of Roles that might be associated with an Event-Party relationship.';


-- -----------------------------------------------------
-- Table `fc_test`.`Event_Party_Association_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Event_Party_Association_Role` (
  `id` INT NOT NULL COMMENT '',
  `Event_Party_Association_Role_Type_id` INT NOT NULL COMMENT '',
  `Event_Party_Association_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Event_Party_Association_Role_Event_Party_Association_Rol_idx` (`Event_Party_Association_Role_Type_id` ASC)  COMMENT '',
  INDEX `fk_Event_Party_Association_Role_Event_Party_Association1_idx` (`Event_Party_Association_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Event_Party_Association_Role_Event_Party_Association_Role_1`
    FOREIGN KEY (`Event_Party_Association_Role_Type_id`)
    REFERENCES `fc_test`.`Event_Party_Association_Role_Type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Event_Party_Association_Role_Event_Party_Association1`
    FOREIGN KEY (`Event_Party_Association_id`)
    REFERENCES `fc_test`.`Event_Party_Association` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Used to tie a role to an Event-Party Relationship. This table allows multiple roles for a single relationship.';


-- -----------------------------------------------------
-- Table `fc_test`.`Event_Schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Event_Schedule` (
  `id` INT NOT NULL COMMENT '',
  `Event_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Event_Schedule_Event1_idx` (`Event_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Event_Schedule_Event1`
    FOREIGN KEY (`Event_id`)
    REFERENCES `fc_test`.`Event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'All events require a time set aside for them, this table will associate an event with either a reoccuring, or an incidental scheduled time.\n\nAn event could conceivably recur and also have occasional incidental occurrence.\n\nThere should only be one Event_Schedule per Event, but as many IS or RS per ES as needed.';


-- -----------------------------------------------------
-- Table `fc_test`.`Incidental_Schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Incidental_Schedule` (
  `id` INT NOT NULL COMMENT '',
  `from_datetime` DATETIME NOT NULL COMMENT '',
  `thru_datetime` DATETIME NULL COMMENT '',
  `Event_Schedule_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Incidental_Schedule_Event_Schedule1_idx` (`Event_Schedule_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Incidental_Schedule_Event_Schedule1`
    FOREIGN KEY (`Event_Schedule_id`)
    REFERENCES `fc_test`.`Event_Schedule` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'If an event will occur on some specific date and time, it should be linked to by this table.';


-- -----------------------------------------------------
-- Table `fc_test`.`Reoccurring_Schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Reoccurring_Schedule` (
  `id` INT NOT NULL COMMENT '',
  `from_date` DATE NOT NULL COMMENT '',
  `thru_date` DATE NULL COMMENT '',
  `Event_Schedule_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Reoccurring_Schedule_Event_Schedule1_idx` (`Event_Schedule_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Reoccurring_Schedule_Event_Schedule1`
    FOREIGN KEY (`Event_Schedule_id`)
    REFERENCES `fc_test`.`Event_Schedule` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'If an event will occur on some regular days of the week or month, an event should be linked to by this table.';


-- -----------------------------------------------------
-- Table `fc_test`.`RS_Day_of_Week`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`RS_Day_of_Week` (
  `id` INT NOT NULL COMMENT '',
  `day` INT NULL COMMENT '',
  `Reoccurring_Schedule_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_RS_Day_of_Week_Reoccurring_Schedule1_idx` (`Reoccurring_Schedule_id` ASC)  COMMENT '',
  CONSTRAINT `fk_RS_Day_of_Week_Reoccurring_Schedule1`
    FOREIGN KEY (`Reoccurring_Schedule_id`)
    REFERENCES `fc_test`.`Reoccurring_Schedule` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'If a reoccurring event happens on a specific day of the week, this table will store the time, and link to the relevent RS.';


-- -----------------------------------------------------
-- Table `fc_test`.`RS_Day_of_Month`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`RS_Day_of_Month` (
  `id` INT NOT NULL COMMENT '',
  `day` INT NULL COMMENT '',
  `Reoccurring_Schedule_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_RS_Day_of_Month_Reoccurring_Schedule1_idx` (`Reoccurring_Schedule_id` ASC)  COMMENT '',
  CONSTRAINT `fk_RS_Day_of_Month_Reoccurring_Schedule1`
    FOREIGN KEY (`Reoccurring_Schedule_id`)
    REFERENCES `fc_test`.`Reoccurring_Schedule` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'If a reoccurring event happens on a specific day of the month, this table will store the time, and link to the relevent RS.';


-- -----------------------------------------------------
-- Table `fc_test`.`RS_Scheduled_Time`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`RS_Scheduled_Time` (
  `id` INT NOT NULL COMMENT '',
  `from_time` TIME NOT NULL COMMENT '',
  `thru_time` TIME NULL COMMENT '',
  `Reoccurring_Schedule_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_RS_Scheduled_Time_Reoccurring_Schedule1_idx` (`Reoccurring_Schedule_id` ASC)  COMMENT '',
  CONSTRAINT `fk_RS_Scheduled_Time_Reoccurring_Schedule1`
    FOREIGN KEY (`Reoccurring_Schedule_id`)
    REFERENCES `fc_test`.`Reoccurring_Schedule` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'If a reoccurring event happens at a specific time, this table will store the time, and link to the relevent RS.';


-- -----------------------------------------------------
-- Table `fc_test`.`Sales_Tax_State_Dependency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fc_test`.`Sales_Tax_State_Dependency` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `state_code` TEXT NOT NULL COMMENT '',
  `Sales_Tax_Lookup_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_Sales_Tax_State_Dependency_Sales_Tax_Lookup1_idx` (`Sales_Tax_Lookup_id` ASC)  COMMENT '',
  CONSTRAINT `fk_Sales_Tax_State_Dependency_Sales_Tax_Lookup1`
    FOREIGN KEY (`Sales_Tax_Lookup_id`)
    REFERENCES `fc_test`.`Sales_Tax_Lookup` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `fc_test`.`Gender_Type`
-- -----------------------------------------------------
START TRANSACTION;
USE `fc_test`;
INSERT INTO `fc_test`.`Gender_Type` (`name`, `description`) VALUES ('Male', '');
INSERT INTO `fc_test`.`Gender_Type` (`name`, `description`) VALUES ('Female', '');

COMMIT;